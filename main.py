import asyncio
import logging
import sys
import sqlite3
import random
import string
from os import getenv

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.types.user import User
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import TextMention

TOKEN = "6724959545:AAGEAZ9dXte-HIVUY_IQKPj406dPJKswm3Y"
conn = sqlite3.connect("db/db.db3")
cursor = conn.cursor()
router = Router()

d = {
    -1: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
    1: '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
    2: '–í–æ—Ä–∫–µ—Ä',
    3: '–í–±–∏–≤–µ—Ä',
    4: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
    5: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫',
    6: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'   
}

class CreateUser(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()
    
class ChangeTag(StatesGroup):
    tag = State()

@router.message(CommandStart())
async def __start(message: Message, state: FSMContext) -> None:
    cursor.execute('SELECT status, tag FROM users WHERE uid = ?', (message.from_user.id,))
    result = cursor.fetchall()
    settings = InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    chats = InlineKeyboardButton(text='üí¨ –ß–∞—Ç—ã', callback_data='chats')
    listings = InlineKeyboardButton(text='üìÇ –û–±—å—è–≤–ª–µ–Ω–∏—è', callback_data='listings')
    admin_panel = InlineKeyboardButton(text='üñ• –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin_panel')
    if result:
        if result[0][0] == -1:
            await message.answer('<b>‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>')
        elif result[0][0] == 0:
            btn = InlineKeyboardButton(text='go', callback_data='proceed')
            menu = InlineKeyboardMarkup(inline_keyboard=[[btn]])
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏, –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã –≥–æ—Ç–æ–≤—ã?',
                                 reply_markup=menu)
        elif result[0][0] == 1:
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.')
        else:
            if result[0][0] == 6:
                menu = InlineKeyboardMarkup(inline_keyboard=[[listings], [settings], [chats], [admin_panel]])
            else:
                menu = InlineKeyboardMarkup(inline_keyboard=[[listings], [settings], [chats]])
            lists = cursor.execute('SELECT id from listings WHERE uid = ?', (message.from_user.id,)).fetchall()
            await message.answer(f'<b>üí™üèª –°–õ–û–í–û –ü–ê–¶–ê–ù–ê GROUP\n\n#Ô∏è‚É£ –¢—ç–≥: <code>#{result[0][1]}</code>\nüìØ –°—Ç–∞—Ç—É—Å: <code>{d[result[0][0]]}</code>\nüìÇ –û–±—ä—è–≤–ª–µ–Ω–∏–π: <code>{len(lists)}</code>\nüí∞ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <code>TODO</code>\nüìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <code>TODO</code>\nüë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: TODO, ?%\nüë®üèª –û–ø–µ—Ä–∞—Ç–æ—Ä: TODO, ?%</b>',
                                 reply_markup=menu)
    else:
        cursor.execute('INSERT INTO users (uid, status, username, tag) VALUES (?, ?, ?, ?)', (message.from_user.id,
                                                                                              0,
                                                                                              message.from_user.username if message.from_user.username is not None else '',
                                                                                              ''.join(random.choice(string.ascii_letters) for i in range(8))))
        conn.commit()
        btn = InlineKeyboardButton(text='go', callback_data='proceed')
        menu = InlineKeyboardMarkup(inline_keyboard=[[btn]])
        await message.answer(
            '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏, –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n–í—ã –≥–æ—Ç–æ–≤—ã?</b>',
            reply_markup=menu)
        
@router.callback_query(lambda c: c.data == 'go_start')
async def __start_callback(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    cursor.execute('SELECT status, tag FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    cid = callback_query.message.chat.id
    mid = callback_query.message.message_id
    settings = InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    chats = InlineKeyboardButton(text='üí¨ –ß–∞—Ç—ã', callback_data='chats')
    listings = InlineKeyboardButton(text='üìÇ –û–±—å—è–≤–ª–µ–Ω–∏—è', callback_data='listings')
    admin_panel = InlineKeyboardButton(text='üñ• –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin_panel')
    if result:
        if result[0][0] == -1:
            await bot.edit_message_text('<b>‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>', cid, mid)
        elif result[0][0] == 0:
            btn = InlineKeyboardButton(text='go', callback_data='proceed')
            menu = InlineKeyboardMarkup(inline_keyboard=[[btn]])
            await bot.edit_message_text('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏, –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n–í—ã –≥–æ—Ç–æ–≤—ã?</b>', cid, mid,
                                 reply_markup=menu)
        elif result[0][0] == 1:
            await bot.edit_message_text('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.</b>', cid, mid)
        else:
            if result[0][0] == 6:
                menu = InlineKeyboardMarkup(inline_keyboard=[[listings], [settings], [chats], [admin_panel]])
            else:
                menu = InlineKeyboardMarkup(inline_keyboard=[[listings], [settings], [chats]])
            lists = cursor.execute('SELECT id from listings WHERE uid = ?', (callback_query.from_user.id,)).fetchall()
            await bot.edit_message_text(f'<b>üí™üèª –°–õ–û–í–û –ü–ê–¶–ê–ù–ê GROUP\n\n#Ô∏è‚É£ –¢—ç–≥: <code>#{result[0][1]}</code>\nüìØ –°—Ç–∞—Ç—É—Å: <code>{d[result[0][0]]}</code>\nüìÇ –û–±—ä—è–≤–ª–µ–Ω–∏–π: <code>{len(lists)}</code>\nüí∞ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <code>TODO</code>\nüìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <code>TODO</code>\nüë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: TODO, ?%\nüë®üèª –û–ø–µ—Ä–∞—Ç–æ—Ä: TODO, ?%</b>', cid, mid,
                                 reply_markup=menu)

@router.callback_query(lambda c: 'chats' in c.data)
async def __chatpanel(callback_query: types.CallbackQuery, state: FSMContext):
    chatwork = InlineKeyboardButton(text='–ß–∞—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤', url='https://t.me/+hxjypzMr3O9jZjQ0')
    chatprofit = InlineKeyboardButton(text='–ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç', url='https://t.me/+od_rBY99YwNiNTJk')
    markup = InlineKeyboardMarkup(inline_keyboard=[[chatwork, chatprofit]] + [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='go_start')]])
    await bot.edit_message_text("<b>üí¨ –ß–∞—Ç—ã</b>", callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)

@router.callback_query(lambda c: c.data == 'listings')
async def __listings(callback_query: types.CallbackQuery, state: FSMContext):
    cid = callback_query.message.chat.id
    mid = callback_query.message.message_id
    buttons = []
    listings = cursor.execute("select phishing_id, name, service from listings where uid=?", (callback_query.from_user.id,)).fetchall()
    for lst in listings:
        buttons.append([InlineKeyboardButton(text=(cursor.execute('select flag from services where service=?', (lst[2],)).fetchone()[0] + " | " + str(lst[1]) + " | " + str(lst[0])), callback_data=f'listing{lst[0]}')])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons + [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='go_start')]])
    await bot.edit_message_text('''–í–∞—à–∏ –æ–±—å—è–≤–ª–µ–Ω–∏—è''', cid, mid, reply_markup=markup)
    await state.set_state(CreateUser.question1)

@router.callback_query(lambda c: c.data == 'proceed')
async def __proceed(callback_query: types.CallbackQuery, state: FSMContext):
    cid = callback_query.message.chat.id
    mid = callback_query.message.message_id
    await bot.edit_message_text('''–í –∫–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ —ç—Ç–æ–≥–æ?''', cid, mid)
    await state.set_state(CreateUser.question1)

@router.message(CreateUser.question1)
async def __q_1(message: types.Message, state: FSMContext):
    q_1 = message.text
    await state.update_data(q1=q_1)
    await message.answer('''–°–∫–æ–ª—å–∫–æ —É –í–∞—Å –±—ã–ª–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤?''')
    await state.set_state(CreateUser.question2)

@router.message(CreateUser.question2)
async def __q_2(message: types.Message, state: FSMContext):
    q_2 = message.text
    await state.update_data(q2=q_2)
    await message.answer('''–û—Ç –∫–æ–≥–æ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –∫–æ–º–∞–Ω–¥–µ?''')
    await state.set_state(CreateUser.question3)

@router.message(CreateUser.question3)
async def __finalauthorization(message: types.Message, state: FSMContext):
    q_3 = message.text
    await state.update_data(q3=q_3)
    user_data = await state.get_data()
    cursor.execute('update users set status=1 where uid=? ', (message.from_user.id,))
    conn.commit()
    approve = InlineKeyboardButton(text='–º–æ–∂–Ω–æ', callback_data=f'appr{message.from_user.id}')
    decline = InlineKeyboardButton(text='–Ω–µ –º–æ–∂–Ω–æ', callback_data=f'decl{message.from_user.id}')
    menu = InlineKeyboardMarkup(inline_keyboard=[[approve, decline]])
    await message.answer('''–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.''')
    await bot.send_message(-4017721930,
                           f'''–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{message.from_user.username if message.from_user.username is not None else "id" + str(message.from_user.id)}](tg://user?id={message.from_user.id})\n–í –∫–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ —ç—Ç–æ–≥–æ?: {user_data['q1']}\n–°–∫–æ–ª—å–∫–æ —É –í–∞—Å –±—ã–ª–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤?: {user_data['q2']}\n–û—Ç –∫–æ–≥–æ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –∫–æ–º–∞–Ω–¥–µ?: {user_data['q3']}\n''',
                           reply_markup=menu,
                           parse_mode=ParseMode.MARKDOWN_V2)
    await state.clear()

@router.callback_query(lambda c: 'appr' in c.data)
async def __approve(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('UPDATE users SET status=2 WHERE uid=? ', (int(callback_query.data.replace('appr', '')),))
    conn.commit()
    await bot.send_message(int(callback_query.data.replace('appr', '')), "–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start")
    await bot.edit_message_text(callback_query.message.text + "\n–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", -4017721930, callback_query.message.message_id)
    
@router.callback_query(lambda c: 'decl' in c.data)
async def __decline(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('update users set status=-1 where uid=? ', (int(callback_query.data.replace('decl', '')),))
    conn.commit()
    await bot.send_message(int(callback_query.data.replace('decl', '')), "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await bot.edit_message_text(callback_query.message.text + "\n–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", -4017721930, callback_query.message.message_id)
    
@router.callback_query(lambda c: 'admin_panel' in c.data)
async def __adminpanel(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        users = InlineKeyboardButton(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='usrscheck0')
        markup = InlineKeyboardMarkup(inline_keyboard=[[users]] + [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='go_start')]])
        await bot.edit_message_text("<b>üñ• –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)
    
@router.callback_query(lambda c: 'settings' in c.data)
async def __settpanel(callback_query: types.CallbackQuery, state: FSMContext):
    tag = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç—ç–≥', callback_data='tagchng')
    markup = InlineKeyboardMarkup(inline_keyboard=[[tag]] + [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='go_start')]])
    await bot.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)

@router.callback_query(lambda c: 'tagchng' in c.data)
async def __settpanel(callback_query: types.CallbackQuery, state: FSMContext):
    tag = cursor.execute("select tag from users where uid=?", (callback_query.from_user.id,)).fetchone()[0]
    await bot.edit_message_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç—ç–≥: <code>#{tag}</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—ç–≥:", callback_query.from_user.id, callback_query.message.message_id)
    await state.set_state(ChangeTag.tag)
    
@router.message(ChangeTag.tag, F.text.not_in(list(map(lambda x: x[0], cursor.execute("select tag from users").fetchall()))))
async def __tagsuccess(message: types.Message, state: FSMContext):
    cursor.execute("update users set tag=? where uid=?", (message.text, message.from_user.id))
    conn.commit()
    markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='go_start')]])
    await bot.send_message(message.from_user.id, "–ù–æ–≤—ã–π —Ç—ç–≥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=markup)
    await state.clear()

@router.message(ChangeTag.tag)
async def __tagfailure(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π —Ç—ç–≥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç—ç–≥:")

@router.callback_query(lambda c: 'usrscheck' in c.data )
async def __adminpanel(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        users = cursor.execute('SELECT uid, status, username FROM users').fetchall()
        buttons = [list() for i in range(len(users))]
        i = 0
        for user in users:
            if user[1] != 0:
                if user[2] != '':
                    buttons[i // 3].append(InlineKeyboardButton(text=user[2], callback_data=f'user{user[0]}'))
                else:
                    buttons[i // 3].append(InlineKeyboardButton(text=str(user[0]), callback_data=f'user{user[0]}'))
                i += 1
        pages = []
        n_page = int(callback_query.data.replace("usrscheck", ''))
        for i in range(0, len(buttons), 10):
            pages.append(buttons[i: i + 10])
        arrows = [[InlineKeyboardButton(text=f'1 / 1', callback_data="ghjaczskdf")]] if len(pages) == 1 else [[InlineKeyboardButton(text=f'1 / {len(pages)}', callback_data="ghjaczskdf"), InlineKeyboardButton(text='->', callback_data="usrscheck1")]] if n_page == 0 else [[InlineKeyboardButton(text='<-', callback_data=f"usrscheck{len(pages) - 2}"), InlineKeyboardButton(text=f'{len(pages)} / {len(pages)}', callback_data="uazsxecdghijk")]] if n_page == len(pages) - 1 else [[InlineKeyboardButton(text='<-', callback_data=f"usrscheck{n_page - 1}"), InlineKeyboardButton(text=f'{n_page + 1} / {len(pages)}', callback_data="ghjaczskdf"), InlineKeyboardButton(text='->', callback_data=f"usrscheck{n_page + 1}")]]
        markup = InlineKeyboardMarkup(inline_keyboard=pages[n_page]+arrows+[[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='admin_panel')]])
        await bot.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)

@router.callback_query(lambda c: 'user' in c.data)
async def __userinfo(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        id = int(callback_query.data.replace("user", ''))
        buttons = [[InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'update{id}')],
                   [InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data=f'block{id}')],
                   [InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='usrscheck0')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        dt = cursor.execute('SELECT id, status, tag FROM users WHERE uid = ?', (id,)).fetchone()

        await bot.edit_message_text(f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ{dt[0]}\n\nID: {id}\n–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {d[dt[1]]}\n–¢–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>#{dt[2]}</code>''', callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)

@router.callback_query(lambda c: 'block' in c.data)
async def __blockuser(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        id = int(callback_query.data.replace("block", ''))
        buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=f'user{id}')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        cursor.execute('update users set status=-1 where uid=? ', (id,))
        conn.commit()
        await bot.send_message(id, "<b>‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>")
        await bot.edit_message_text(f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω''', callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)    
        
@router.callback_query(lambda c: 'update' in c.data)
async def __updateuser(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        id = int(callback_query.data.replace("update", ''))
        buttons = [[InlineKeyboardButton(text='–í–æ—Ä–∫–µ—Ä', callback_data=f'__work{id}')],
                   [InlineKeyboardButton(text='–í–±–∏–≤–µ—Ä', callback_data=f'__vbv{id}')],
                   [InlineKeyboardButton(text='–û–ø–µ—Ä–∞—Ç–æ—Ä', callback_data=f'__opr{id}')],
                   [InlineKeyboardButton(text='–ù–∞—Å—Ç–∞–≤–Ω–∏–∫', callback_data=f'__nast{id}')],
                   [InlineKeyboardButton(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', callback_data=f'__adm{id}')],
                   [InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=f'user{id}')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await bot.edit_message_text(f'''–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {id}''', callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)

@router.callback_query(lambda c: '__work' in c.data)
async def __workuser(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        id = int(callback_query.data.replace("__work", ''))
        buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=f'user{id}')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        cursor.execute('update users set status=2 where uid=? ', (id,))
        conn.commit()
        await bot.send_message(id, f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {d[2]}")
        await bot.edit_message_text(f'''–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω''', callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)  
        
@router.callback_query(lambda c: '__vbv' in c.data)
async def __vbvuser(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        id = int(callback_query.data.replace("__vbv", ''))
        buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=f'user{id}')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        cursor.execute('update users set status=3 where uid=? ', (id,))
        conn.commit()
        await bot.send_message(id, f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {d[3]}")
        await bot.edit_message_text(f'''–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω''', callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)  
        
@router.callback_query(lambda c: '__opr' in c.data)
async def __opruser(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        id = int(callback_query.data.replace("__opr", ''))
        buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=f'user{id}')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        cursor.execute('update users set status=4 where uid=? ', (id,))
        conn.commit()
        await bot.send_message(id, f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {d[4]}")
        await bot.edit_message_text(f'''–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω''', callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)  
        
@router.callback_query(lambda c: '__nast' in c.data)
async def __nastuser(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        id = int(callback_query.data.replace("__nast", ''))
        buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=f'user{id}')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        cursor.execute('update users set status=5 where uid=? ', (id,))
        conn.commit()
        await bot.send_message(id, f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {d[5]}")
        await bot.edit_message_text(f'''–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω''', callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)  

@router.callback_query(lambda c: '__adm' in c.data)
async def __admuser(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('SELECT status FROM users WHERE uid = ?', (callback_query.from_user.id,))
    result = cursor.fetchall()
    if result[0][0] == 6:
        id = int(callback_query.data.replace("__adm", ''))
        buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=f'user{id}')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        cursor.execute('update users set status=6 where uid=? ', (id,))
        conn.commit()
        await bot.send_message(id, f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {d[6]}")
        await bot.edit_message_text(f'''–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω''', callback_query.from_user.id, callback_query.message.message_id, reply_markup=markup)  

async def main() -> None:
    global bot
    bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
    
#TODO 